import java.text.SimpleDateFormat

buildscript {
    ext {
        springBootVersion = SPRING_BOOT_VERSION
    }
    repositories {
        mavenCentral()
        maven {
            url 'https://repo.spring.io/libs-milestone'
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath('se.transmode.gradle:gradle-docker:1.2')
        classpath "gradle.plugin.fr.brouillard.oss.gradle:gradle-jgitver-plugin:0.6.1"
    }
}


apply plugin: 'fr.brouillard.oss.gradle.jgitver'
apply plugin: 'docker'
apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

version = '0.0.1-SNAPSHOT'
jar {
    baseName = 'Bot'
    version = '0.0.1-SNAPSHOT'
}

def profiles = 'dev'

bootRun {
    args = ["--spring.profiles.active=" + profiles]
}

springBoot{
    buildInfo {
        properties {
            additionalProperties = [
                    'buildTimeStamp': getBuildTimeStamp()
            ]
        }
    }
}

sourceCompatibility = 1.8

repositories {
    mavenCentral()
    maven {
        url 'https://repo.spring.io/libs-milestone'
    }
}

dependencies {
    compile('org.springframework.boot:spring-boot-starter')
    compile('org.springframework.boot:spring-boot-starter-amqp')

    compile('org.springframework.security.oauth:spring-security-oauth2:2.3.0.RELEASE')

    // https://mvnrepository.com/artifact/org.jasypt/jasypt
    compile group: 'org.jasypt', name: 'jasypt', version: '1.9.2'

    // https://mvnrepository.com/artifact/org.apache.commons/commons-exec
    compile group: 'org.apache.commons', name: 'commons-exec', version: '1.3'

    // https://mvnrepository.com/artifact/com.google.guava/guava
    compile group: 'com.google.guava', name: 'guava', version: '23.0'



    // https://mvnrepository.com/artifact/org.apache.commons/commons-lang3
    compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.7'
    compile group: 'com.jayway.jsonpath', name: 'json-path', version: '2.3.0'
    // https://mvnrepository.com/artifact/org.codehaus.jackson/jackson-mapper-asl
    compile group: 'org.codehaus.jackson', name: 'jackson-mapper-asl', version: '1.9.2'

    // https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-databind
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.9.5'

    // https://mvnrepository.com/artifact/org.apache.httpcomponents/httpclient
    compile group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5.5'

    // https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-cache
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-cache', version: '2.1.2.RELEASE'

    // https://mvnrepository.com/artifact/com.github.ben-manes.caffeine/caffeine
    compile group: 'com.github.ben-manes.caffeine', name: 'caffeine', version: '2.6.2'



    // https://mvnrepository.com/artifact/com.github.javafaker/javafaker
    compile group: 'com.github.javafaker', name: 'javafaker', version: '0.16'

    compile project(":DTO")
    testCompile('org.springframework.boot:spring-boot-starter-test')
}

task buildDockerLatest(type: Docker, dependsOn: build) {
    push = false
    tag = 'fxlabs/bot'
//    tagVersion = "latest"
    tagVersion = "${ver}"
    dockerfile = file('src/main/docker/Dockerfile')
    doFirst {
        copy {
//            from 'build/libs/Bot-0.0.1-SNAPSHOT.jar'
            from 'build/libs/'
            into 'build/docker'
        }
    }
}

task buildDocker(type: Docker, dependsOn: build) {
    push = false
    tag = 'fxlabs/bot'
    tagVersion = getDate()
    dockerfile = file('src/main/docker/Dockerfile')
    doFirst {
        copy {
//            from 'build/libs/Bot-0.0.1-SNAPSHOT.jar'
            from 'build/libs/'
            into 'build/docker'
        }
    }
}


task buildDockerEnterprise(type: Docker, dependsOn: build) {
    push = false
    tag = 'fxlabs/bot-ee'
//    tagVersion = "latest"
    tagVersion = "${ver}"
    dockerfile = file('src/main/docker/Dockerfile')
    doFirst {
        copy {
//            from 'build/libs/Bot-0.0.1-SNAPSHOT.jar'
            from 'build/libs/' 
            into 'build/docker'
        }
    }
}

task buildDockerNightly(type: Docker, dependsOn: build) {
    push = false
    tag = 'fxlabs/bot'
    tagVersion = getNightly()
    dockerfile = file('src/main/docker/Dockerfile')
    doFirst {
        copy {
//            from 'build/libs/Bot-0.0.1-SNAPSHOT.jar'
            from 'build/libs/'
            into 'build/docker'
        }
    }
}


task startScript() {
  doLast {
     exec {
          executable "./myScript.sh"
      }
  }
}


def getNightly() {
    new Date().format('yyyy-MM-dd')
}
def getDate() {
    new Date().format('yyyy-MM-dd-HHmm')
}
def getBuildTimeStamp(){
    def simpleDateFormat = new SimpleDateFormat("EEE, dd-MMM-yyyy, HH:mm:ss")
    simpleDateFormat.setTimeZone(TimeZone.getDefault())
    return simpleDateFormat.format(new Date())
}
